{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nimport React, { useState, useContext, useRef, useEffect, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport hoistStatics from 'hoist-non-react-statics';\nimport resolveStyles from './resolve-styles';\nimport getRadiumStyleState from './get-radium-style-state';\nimport { RadiumConfigContext, withRadiumContexts } from './context';\nimport { StyleKeeperContext } from './context';\nvar KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES = ['arguments', 'callee', 'caller', 'length', 'name', 'prototype', 'type'];\nvar RADIUM_PROTO;\nvar RADIUM_METHODS;\n\nfunction copyProperties(source, target) {\n  Object.getOwnPropertyNames(source).forEach(function (key) {\n    if (KEYS_TO_IGNORE_WHEN_COPYING_PROPERTIES.indexOf(key) < 0 && !target.hasOwnProperty(key)) {\n      var descriptor = Object.getOwnPropertyDescriptor(source, key);\n      descriptor && Object.defineProperty(target, key, descriptor);\n    }\n  });\n} // Handle scenarios of:\n// - Inherit from `React.Component` in any fashion\n//   See: https://github.com/FormidableLabs/radium/issues/738\n// - There's an explicit `render` field defined\n\n\nfunction isStateless(component) {\n  var proto = component.prototype || {};\n  return !component.isReactComponent && !proto.isReactComponent && !component.render && !proto.render;\n} // Check if value is a real ES class in Native / Node code.\n// See: https://stackoverflow.com/a/30760236\n\n\nfunction isNativeClass(component) {\n  return typeof component === 'function' && /^\\s*class\\s+/.test(component.toString());\n} // Handle es7 arrow functions on React class method names by detecting\n// and transfering the instance method to original class prototype.\n// (Using a copy of the class).\n// See: https://github.com/FormidableLabs/radium/issues/738\n\n\nfunction copyArrowFuncs(enhancedSelf, ComposedComponent) {\n  RADIUM_METHODS.forEach(function (name) {\n    var thisDesc = Object.getOwnPropertyDescriptor(enhancedSelf, name);\n    var thisMethod = (thisDesc || {}).value; // Only care if have instance method.\n\n    if (!thisMethod) {\n      return;\n    }\n\n    var radiumDesc = Object.getOwnPropertyDescriptor(RADIUM_PROTO, name);\n    var radiumProtoMethod = (radiumDesc || {}).value;\n    var superProtoMethod = ComposedComponent.prototype[name]; // Allow transfer when:\n    // 1. have an instance method\n    // 2. the super class prototype doesn't have any method\n    // 3. it is not already the radium prototype's\n\n    if (!superProtoMethod && thisMethod !== radiumProtoMethod) {\n      // Transfer dynamic render component to Component prototype (copy).\n      thisDesc && Object.defineProperty(ComposedComponent.prototype, name, thisDesc); // Remove instance property, leaving us to have a contrived\n      // inheritance chain of (1) radium, (2) superclass.\n\n      delete enhancedSelf[name];\n    }\n  });\n}\n\nfunction trimRadiumState(enhancer) {\n  if (enhancer._extraRadiumStateKeys && enhancer._extraRadiumStateKeys.length > 0) {\n    var trimmedRadiumState = enhancer._extraRadiumStateKeys.reduce(function (state, key) {\n      // eslint-disable-next-line no-unused-vars\n      var extraStateKey = state[key],\n          remainingState = _objectWithoutProperties(state, [key].map(_toPropertyKey));\n\n      return remainingState;\n    }, getRadiumStyleState(enhancer));\n\n    enhancer._lastRadiumState = trimmedRadiumState;\n    enhancer.setState({\n      _radiumStyleState: trimmedRadiumState\n    });\n  }\n}\n\nfunction cleanUpEnhancer(enhancer) {\n  var _radiumMouseUpListener = enhancer._radiumMouseUpListener,\n      _radiumMediaQueryListenersByQuery = enhancer._radiumMediaQueryListenersByQuery;\n  enhancer._radiumIsMounted = false;\n\n  if (_radiumMouseUpListener) {\n    _radiumMouseUpListener.remove();\n  }\n\n  if (_radiumMediaQueryListenersByQuery) {\n    Object.keys(_radiumMediaQueryListenersByQuery).forEach(function (query) {\n      _radiumMediaQueryListenersByQuery[query].remove();\n    }, enhancer);\n  }\n}\n\nfunction resolveConfig(propConfig, contextConfig, hocConfig) {\n  var config = propConfig || contextConfig || hocConfig;\n\n  if (hocConfig && config !== hocConfig) {\n    config = _objectSpread({}, hocConfig, config);\n  }\n\n  return config;\n}\n\nfunction renderRadiumComponent(enhancer, renderedElement, resolvedConfig, propConfig) {\n  var _resolveStyles = resolveStyles(enhancer, renderedElement, resolvedConfig),\n      extraStateKeyMap = _resolveStyles.extraStateKeyMap,\n      element = _resolveStyles.element;\n\n  enhancer._extraRadiumStateKeys = Object.keys(extraStateKeyMap);\n\n  if (propConfig) {\n    return React.createElement(RadiumConfigContext.Provider, {\n      value: propConfig\n    }, element);\n  }\n\n  return element;\n}\n\nfunction createEnhancedFunctionComponent(origComponent, config) {\n  var RadiumEnhancer = React.forwardRef(function (props, ref) {\n    var radiumConfig = props.radiumConfig,\n        otherProps = _objectWithoutProperties(props, [\"radiumConfig\"]);\n\n    var radiumConfigContext = useContext(RadiumConfigContext);\n    var styleKeeperContext = useContext(StyleKeeperContext);\n\n    var _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n    var enhancerApi = useRef({\n      state: state,\n      setState: setState,\n      _radiumMediaQueryListenersByQuery: undefined,\n      _radiumMouseUpListener: undefined,\n      _radiumIsMounted: true,\n      _lastRadiumState: undefined,\n      _extraRadiumStateKeys: undefined,\n      _radiumStyleKeeper: styleKeeperContext\n    }).current; // result of useRef is never recreated and is designed to be mutable\n    // we need to make sure the latest state is attached to it\n\n    enhancerApi.state = state;\n    useEffect(function () {\n      return function () {\n        cleanUpEnhancer(enhancerApi);\n      };\n    }, [enhancerApi]);\n    var hasExtraStateKeys = enhancerApi._extraRadiumStateKeys && enhancerApi._extraRadiumStateKeys.length > 0;\n    useEffect(function () {\n      trimRadiumState(enhancerApi);\n    }, [hasExtraStateKeys, enhancerApi]);\n    var renderedElement = origComponent(otherProps, ref);\n    var currentConfig = resolveConfig(radiumConfig, radiumConfigContext, config);\n    return renderRadiumComponent(enhancerApi, renderedElement, currentConfig, radiumConfig);\n  });\n  RadiumEnhancer._isRadiumEnhanced = true;\n  RadiumEnhancer.defaultProps = origComponent.defaultProps;\n  return hoistStatics(RadiumEnhancer, origComponent);\n}\n\nfunction createEnhancedClassComponent(origComponent, ComposedComponent, config) {\n  var RadiumEnhancer =\n  /*#__PURE__*/\n  function (_ComposedComponent) {\n    _inherits(RadiumEnhancer, _ComposedComponent); // need to attempt to assign to this.state in case\n    // super component is setting state on construction,\n    // otherwise class properties reinitialize to undefined\n    // need to assign the following methods to this.xxx as\n    // tests attempt to set this on the original component\n\n\n    function RadiumEnhancer() {\n      var _this;\n\n      _classCallCheck(this, RadiumEnhancer);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(RadiumEnhancer).apply(this, arguments));\n      _this.state = _this.state || {};\n      _this._radiumStyleKeeper = _this.props.styleKeeperContext;\n      _this._radiumMediaQueryListenersByQuery = _this._radiumMediaQueryListenersByQuery;\n      _this._radiumMouseUpListener = _this._radiumMouseUpListener;\n      _this._radiumIsMounted = true;\n      _this._lastRadiumState = void 0;\n      _this._extraRadiumStateKeys = void 0;\n      _this.state._radiumStyleState = {};\n\n      var self = _assertThisInitialized(_this); // Handle es7 arrow functions on React class method\n\n\n      copyArrowFuncs(self, ComposedComponent);\n      return _this;\n    }\n\n    _createClass(RadiumEnhancer, [{\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps, prevState, snapshot) {\n        if (_get(_getPrototypeOf(RadiumEnhancer.prototype), \"componentDidUpdate\", this)) {\n          _get(_getPrototypeOf(RadiumEnhancer.prototype), \"componentDidUpdate\", this).call(this, prevProps, prevState, snapshot);\n        }\n\n        trimRadiumState(this);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        if (_get(_getPrototypeOf(RadiumEnhancer.prototype), \"componentWillUnmount\", this)) {\n          _get(_getPrototypeOf(RadiumEnhancer.prototype), \"componentWillUnmount\", this).call(this);\n        }\n\n        cleanUpEnhancer(this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var renderedElement = _get(_getPrototypeOf(RadiumEnhancer.prototype), \"render\", this).call(this);\n\n        var currentConfig = resolveConfig(this.props.radiumConfig, this.props.radiumConfigContext, config);\n        return renderRadiumComponent(this, renderedElement, currentConfig, this.props.radiumConfig);\n      }\n    }]);\n\n    return RadiumEnhancer;\n  }(ComposedComponent); // Lazy infer the method names of the Enhancer.\n\n\n  RadiumEnhancer._isRadiumEnhanced = true;\n  RADIUM_PROTO = RadiumEnhancer.prototype;\n  RADIUM_METHODS = Object.getOwnPropertyNames(RADIUM_PROTO).filter(function (n) {\n    return n !== 'constructor' && typeof RADIUM_PROTO[n] === 'function';\n  }); // Class inheritance uses Object.create and because of __proto__ issues\n  // with IE <10 any static properties of the superclass aren't inherited and\n  // so need to be manually populated.\n  // See http://babeljs.io/docs/advanced/caveats/#classes-10-and-below-\n\n  copyProperties(origComponent, RadiumEnhancer);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This also fixes React Hot Loader by exposing the original components top\n    // level prototype methods on the Radium enhanced prototype as discussed in\n    // https://github.com/FormidableLabs/radium/issues/219.\n    copyProperties(ComposedComponent.prototype, RadiumEnhancer.prototype);\n  } // add Radium propTypes to enhanced component's propTypes\n\n\n  if (RadiumEnhancer.propTypes && RadiumEnhancer.propTypes.style) {\n    RadiumEnhancer.propTypes = _objectSpread({}, RadiumEnhancer.propTypes, {\n      style: PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    });\n  } // copy display name to enhanced component\n\n\n  RadiumEnhancer.displayName = origComponent.displayName || origComponent.name || 'Component';\n  return withRadiumContexts(RadiumEnhancer);\n}\n\nfunction createComposedFromNativeClass(ComposedComponent) {\n  ComposedComponent = function (OrigComponent) {\n    function NewComponent() {\n      // Use Reflect.construct to simulate 'new'\n      var obj = Reflect.construct(OrigComponent, arguments, this.constructor);\n      return obj;\n    } // $FlowFixMe\n\n\n    Reflect.setPrototypeOf(NewComponent.prototype, OrigComponent.prototype); // $FlowFixMe\n\n    Reflect.setPrototypeOf(NewComponent, OrigComponent);\n    return NewComponent;\n  }(ComposedComponent);\n\n  return ComposedComponent;\n}\n\nvar ReactForwardRefSymbol = forwardRef(function () {\n  return null;\n}).$$typeof;\nexport default function enhanceWithRadium(configOrComposedComponent) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (ReactForwardRefSymbol && configOrComposedComponent.$$typeof === ReactForwardRefSymbol) {\n    return createEnhancedFunctionComponent(configOrComposedComponent.render, config);\n  }\n\n  if (typeof configOrComposedComponent !== 'function') {\n    return createFactoryFromConfig(config, configOrComposedComponent);\n  }\n\n  var origComponent = configOrComposedComponent; // Handle stateless components\n\n  if (isStateless(origComponent)) {\n    return createEnhancedFunctionComponent(origComponent, config);\n  }\n\n  var _ComposedComponent2 = origComponent; // Radium is transpiled in npm, so it isn't really using es6 classes at\n  // runtime.  However, the user of Radium might be.  In this case we have\n  // to maintain forward compatibility with native es classes.\n\n  if (isNativeClass(_ComposedComponent2)) {\n    _ComposedComponent2 = createComposedFromNativeClass(_ComposedComponent2);\n  } // Shallow copy composed if still original (we may mutate later).\n\n\n  if (_ComposedComponent2 === origComponent) {\n    _ComposedComponent2 =\n    /*#__PURE__*/\n    function (_ComposedComponent3) {\n      _inherits(ComposedComponent, _ComposedComponent3);\n\n      function ComposedComponent() {\n        _classCallCheck(this, ComposedComponent);\n\n        return _possibleConstructorReturn(this, _getPrototypeOf(ComposedComponent).apply(this, arguments));\n      }\n\n      return ComposedComponent;\n    }(_ComposedComponent2);\n  }\n\n  return createEnhancedClassComponent(origComponent, _ComposedComponent2, config);\n}\n\nfunction createFactoryFromConfig(config, configOrComposedComponent) {\n  var newConfig = _objectSpread({}, config, configOrComposedComponent);\n\n  return function (configOrComponent) {\n    return enhanceWithRadium(configOrComponent, newConfig);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}